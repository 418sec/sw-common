startup options for binary logging

--binlog-row-event-max-size=N  (8192)
size of single row event?
should be multiple of 256 bytes

--binlog=filename
location of the binlog sequence file
default <host_name>-bin
default dir (relative path) is the data directory
if given absolute path, it will 
does not exist as global variable

--log-bin-index[=file_name]
normally its the same as binlog but with .index appended.


## Statement selection options

--binlog-do-db=db_name
  Statement-based logging. (weird logic, doesnt really make sense, says that crossdatabase statement logging is not logged
  and also this states which database is marked for statement loggin.

NOTE:cannot use commas, because database names can containe commas

Example: (below configuration will NOT log the following statement, because the default database is "prices"?)

--binlog-do-db=sales

USE prices;
UPDATE sales.janurary SET amount=amount+1000;

--binlog-do-db=sales
USE sales;
UPDATE prices.discounts SET percentage = percentage + 10; -- this is logged now (default db listed in binlog-do-db)

## Row based logging:

the setting for the default db has no effect, it only looks at what is listed in --binlog-do-db.


--binlog-ignore-db=db_name

### statement based logging:
ignore the database if it is also the default set by "use"

### row based logging:
dont include statements affecting  tables listed -binlog-ignore-db databases


--binlog-checksum=NONE|CRC32

--binlog-cache-size(default 32768) x8000
if you have large transactions increase the size to get better performance

--expire_logs_days=0 (default 0 days)
set it to 2 days
automatic log removal after n days

--log_bin (default on)
--skip-log_bin (turn it off)

--log_bin_index
indexfile of the logbin

--log_bin_trust_function_creators
OFF changes to stored functions go to binlogs?

--log_bin_use_v1_row_events (OFF) dont use older versions of bin log records

--log_builtin_as_identified_by_password(OFF)

all create user password are logged as "Identified by password" clause
alter user statements set password are rewritten
set password are changed to a log hash

--log_slave_updates(OFF) updates

should the slave log updates received from master to its own slave bin log

--log_bin_basename (can be set --log_bin) seems to be an old 5.6 option

--log_statements_unsafe_for_binlog

add warnings the error log.

--master_verify_checksum (oh man set this big, default 4096 is to low )

--max_binlog_size (1G default) if a logfile exceeds this value it closed and new one is opened

--max_binlog_stmt_cache_size

sql_log_bin (session level var to enable or disable bin logging)

NOTE: need "SUPER" for this operation
NOTE: there is a global "sql_log_bin" but it is deprecated

--sync-bin-log=0, mysql server does not call explicit fsync (POSIX) to sync the binlog
--sync-bin-log=1 mysql server will explicit fsync(POSIX) the binlog file
--sync-bin-log=N  mysql server will sync the binlog after N commits

NOTE: higher rate improves performance

--innodb_flush_log_at_trx_commit=1 -- every commit flushes logs to disk (ACID compliance)
--innodb_flush_log_at_trx_commit=0 -- every commit flushes logs to disk every second
--innodb_flush_log_at_trx_commit=2 -- every commit but at least once per second in bulk

--innodb_flush_log_at_timeout(default=1 sec) set the flush log frequency

--innodb_flush_method: default NULL, aka use fsync (posix) async_unbuffered(windows)


--transaction-write-set-extraction[=value](OFF)
    describe hash method to group writes belonging to a transaction, hash is used for distributed conflict detection

5.4.4 Binary LOG

https://dev.mysql.com/doc/refman/5.7/en/binary-log.html

Excellent explenation on binlogs

select @@binlog_cache_size,  'binlog_cache_size' -> 32k , 

When a thread that handles the transaction starts, it allocates a buffer of binlog_cache_size to buffer statements.
If a statement is bigger than this, the thread opens a temporary file to store the transaction.
The temporary file is deleted when the thread ends.

MAKE IT LARGE ENOUGH TO AVOID the creation of temp files

select a.* from sys.metrics a where a.variable_name in (
	'created_tmp_files',
	'binlog_cache_disk_use', //status var to show number of transactions that overflowed "binlog_cache_size" and used a temp file
	'binlog_cache_use' // status var to show how many times the cache was used (including creation of temp files)
);

GO to statement based logging

--binlog_format=STATEMENT|ROW(default)|MIXED
is also Global or Session var

--binlog-row-event-max-size=N
--binlog-stmt-cache-size 

determine the size of the cache for the binary log to hold nonstransactional statements.


what is a "nontransactional statement"

--preload-buffer-size
the size of the buffer when preloading indexes

--profiling 
Statement profiling enabled/disabled

--binlog_cache_size (32768)
--
