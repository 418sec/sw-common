@octokit/auth-oauth-app


semantic-release
https://github.com/semantic-release/semantic-release#documentation

http://sentimentalversioning.org/

Usage:

Install with npm install @octokit/auth-token

const { createTokenAuth } = require("@octokit/auth-token");


https://developer.github.com/apps/differences-between-apps/


- An OAuth App acts as a GitHub user, 
- a GitHub App uses its own identity when installed on an organization or on repositories within an organization.

- in organisations the organisational owner or the github App managers 

-  OAuth Apps can't use granular permissions.
-  GitHub App can have granular permissions,
-  
- Oauth App represents is a machine user account consumes a Github enterprise seat, you can log into the machine account directly
	as it has a username password
- GitHub App is a bot and does not consume an enterprise seat
	you cannot login to a bot directly it is not an account


https://developer.github.com/apps/about-apps/

- A user or organisation can own up to 100 github apps
- Github App should take action independent of the user
- Don't expect the GitHub App to know and do everything a user can.
- Don't use a GitHub App if you just need a "Login with GitHub" service. 
- But a GitHub App can use a user identification flow to log users in and do other things.
- Don't build a GitHub App if you only want to act as a GitHub user and do everything that user can do.
- If you are using your app with GitHub Actions,GitHub imposes restrictions on how apps can edit Actions workflow files to help keep your repository secure

About OAuth Apps

- An OAuth App uses GitHub as an identity provider to authenticate as the user who grants access to the app
- (scary) This means when a user grants an OAuth App access,
	they grant permissions to all repositories they have access to in their account, 
	and also to any organizations they belong to that haven't blocked third-party access.

- A user or organization can own up to 100 OAuth apps.
- An OAuth App should always act as the authenticated GitHub user across all of GitHub (for example, when providing user notifications).
- An OAuth App can be used as an identity provider by enabling a "Login with GitHub" for the authenticated user.
- Don't build an OAuth App if you want your application to act on a single repository.
- If you are using your OAuth App with GitHub Actions, GitHub prevents the app from creating or editing Actions workflow files to help keep your repository secure

OAuth2 is a protocol that lets external applications request authorization to private details in a user's GitHub account
 without accessing their password. This is preferred over Basic Authentication because tokens can be limited to specific types of data and can be revoked by users at any time.

# Personal access tokens

A personal access token is a string of characters that functions similarly to an OAuth token in that you can specify its permissions via scopes.
A personal access token is also similar to a password, but you can have many of them and you can revoke access to each one at any time.

- Remember to use this token to represent yourself only.
- You can perform one-off cURL requests
- You can run personal scripts
- Don't set up a script for your whole team or company to use
- Don't set up a shared user account to act as a bot user

# Automating your workflow with GitHub Actions

https://help.github.com/en/actions/automating-your-workflow-with-github-actions

https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/


#Identifying and authorizing users for GitHub Apps





